<?php

/*
* This file has been automatically generated by Mouf/ORM.
* DO NOT edit this file, as it might be overwritten.
* If you need to perform changes, edit the UserDao class instead!
*/

namespace Arceau\Model\DAOs;

use Mouf\Database\DAOInterface;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Arceau\Model\Entities\User;

/**
 * The UserBaseDao class will maintain the persistance of User class into the Users table.

 * @method User findByEmail($fieldValue, $orderBy = null, $limit = null, $offset = null)
 * @method User findOneByEmail($fieldValue, $orderBy = null)
 * @method User findByPassword($fieldValue, $orderBy = null, $limit = null, $offset = null)
 * @method User findOneByPassword($fieldValue, $orderBy = null)
 * @method User findByNom($fieldValue, $orderBy = null, $limit = null, $offset = null)
 * @method User findOneByNom($fieldValue, $orderBy = null)
 * @method User findByPrenom($fieldValue, $orderBy = null, $limit = null, $offset = null)
 * @method User findOneByPrenom($fieldValue, $orderBy = null)
 * @method User findByRightId($fieldValue, $orderBy = null, $limit = null, $offset = null)
 * @method User findOneByRightId($fieldValue, $orderBy = null)

 */
class UserBaseDao extends EntityRepository implements DAOInterface
{
    /**
     * @param EntityManagerInterface $entityManager
     */
    public function __construct($entityManager)
    {
        parent::__construct($entityManager, $entityManager->getClassMetadata('Arceau\Model\Entities\User'));
    }

    /**
     * Get a new bean record.
     *
     * @return User the new bean object
     */
    public function create()
    {
        return new User();
    }

    /**
     * Get a bean by it's Id.
     *
     * @param mixed $id
     *
     * @return User the bean object
     */
    public function getById($id)
    {
        return $this->find($id);
    }

    /**
     * Peforms saving on a bean object.
     *
     * @param mixed bean object
     */
    public function save($entity)
    {
        $this->getEntityManager()->persist($entity);
    }

    /**
     * Peforms remove on a bean object.
     *
     * @param User $entity the bean object
     */
    public function remove(User $entity)
    {
        $this->getEntityManager()->remove($entity);
    }

    /**
     * Returns the lis of beans.
     *
     * @return User[] array of bean objects
     */
    public function getList()
    {
        return $this->findAll();
    }

    /**
     * Finds only one entity. The criteria must contain all the elements needed to find a unique entity.
     * Throw an exception if more than one entity was found.
     *
     * @param array $criteria
     *
     * @return User the bean object
     */
    public function findUniqueBy(array $criteria)
    {
        $result = $this->findBy($criteria);

        if (count($result) == 1) {
            return $result[0];
        } elseif (count($result) > 1) {
            throw new NonUniqueResultException('More than one User was found');
        } else {
            return;
        }
    }

    /**
     * Finds only one entity by Email.
     * Throw an exception if more than one entity was found.
     *
     * @param mixed $fieldValue the value of the filtered field
     *
     * @return User
     */
    public function findUniqueByEmail($fieldValue)
    {
        return $this->findUniqueBy(array('email' => $fieldValue));
    }
    /**
     * Finds only one entity by Password.
     * Throw an exception if more than one entity was found.
     *
     * @param mixed $fieldValue the value of the filtered field
     *
     * @return User
     */
    public function findUniqueByPassword($fieldValue)
    {
        return $this->findUniqueBy(array('password' => $fieldValue));
    }
    /**
     * Finds only one entity by Nom.
     * Throw an exception if more than one entity was found.
     *
     * @param mixed $fieldValue the value of the filtered field
     *
     * @return User
     */
    public function findUniqueByNom($fieldValue)
    {
        return $this->findUniqueBy(array('nom' => $fieldValue));
    }
    /**
     * Finds only one entity by Prenom.
     * Throw an exception if more than one entity was found.
     *
     * @param mixed $fieldValue the value of the filtered field
     *
     * @return User
     */
    public function findUniqueByPrenom($fieldValue)
    {
        return $this->findUniqueBy(array('prenom' => $fieldValue));
    }
    /**
     * Finds only one entity by RightId.
     * Throw an exception if more than one entity was found.
     *
     * @param mixed $fieldValue the value of the filtered field
     *
     * @return User
     */
    public function findUniqueByRightId($fieldValue)
    {
        return $this->findUniqueBy(array('right_id' => $fieldValue));
    }
}
