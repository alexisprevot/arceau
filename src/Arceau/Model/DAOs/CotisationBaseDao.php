<?php

/*
* This file has been automatically generated by Mouf/ORM.
* DO NOT edit this file, as it might be overwritten.
* If you need to perform changes, edit the CotisationDao class instead!
*/

namespace Arceau\Model\DAOs;

use Mouf\Database\DAOInterface;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Arceau\Model\Entities\Cotisation;

/**
 * The CotisationBaseDao class will maintain the persistance of Cotisation class into the Cotisations table.

 * @method Cotisation findBySomme($fieldValue, $orderBy = null, $limit = null, $offset = null)
 * @method Cotisation findOneBySomme($fieldValue, $orderBy = null)

 */
class CotisationBaseDao extends EntityRepository implements DAOInterface
{
    /**
     * @param EntityManagerInterface $entityManager
     */
    public function __construct($entityManager)
    {
        parent::__construct($entityManager, $entityManager->getClassMetadata('Arceau\Model\Entities\Cotisation'));
    }

    /**
     * Get a new bean record.
     *
     * @return Cotisation the new bean object
     */
    public function create()
    {
        return new Cotisation();
    }

    /**
     * Get a bean by it's Id.
     *
     * @param mixed $id
     *
     * @return Cotisation the bean object
     */
    public function getById($id)
    {
        return $this->find($id);
    }

    /**
     * Peforms saving on a bean object.
     *
     * @param mixed bean object
     */
    public function save($entity)
    {
        $this->getEntityManager()->persist($entity);
    }

    /**
     * Peforms remove on a bean object.
     *
     * @param Cotisation $entity the bean object
     */
    public function remove(Cotisation $entity)
    {
        $this->getEntityManager()->remove($entity);
    }

    /**
     * Returns the lis of beans.
     *
     * @return Cotisation[] array of bean objects
     */
    public function getList()
    {
        return $this->findAll();
    }

    /**
     * Finds only one entity. The criteria must contain all the elements needed to find a unique entity.
     * Throw an exception if more than one entity was found.
     *
     * @param array $criteria
     *
     * @return Cotisation the bean object
     */
    public function findUniqueBy(array $criteria)
    {
        $result = $this->findBy($criteria);

        if (count($result) == 1) {
            return $result[0];
        } elseif (count($result) > 1) {
            throw new NonUniqueResultException('More than one Cotisation was found');
        } else {
            return;
        }
    }

    /**
     * Finds only one entity by Somme.
     * Throw an exception if more than one entity was found.
     *
     * @param mixed $fieldValue the value of the filtered field
     *
     * @return Cotisation
     */
    public function findUniqueBySomme($fieldValue)
    {
        return $this->findUniqueBy(array('somme' => $fieldValue));
    }
}
